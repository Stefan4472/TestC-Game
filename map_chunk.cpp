#include "map_chunk.h"

MapChunk::MapChunk(int seed)
{
	for (int i = 0; i < mapRows; i++)
	{
		for (int j = 0; j < mapCols; j++)
		{
			mapTiles[i][j] = TILE_GRASS;
			objectTiles[i][j] = TEXTURE_NONE;
		}
	}
	/* =  // todo: ensure there aren't more texture types than can be stored in a char
		{
			{ TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK },
			{ TILE_GRASS, TILE_GRASS, TILE_GRASS, TILE_GRASS, TILE_GRASS, TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK },
			{ TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK },
			{ TILE_GRASS, TILE_GRASS, TILE_WATER, TILE_WATER, TILE_WHITE_BRICK, TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK },
			{ TILE_GRASS, TILE_GRASS, TILE_WATER, TILE_WATER, TILE_WHITE_BRICK, TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK },
			{ TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK },
			{ TILE_GRASS, TILE_GRASS, TILE_GRASS, TILE_GRASS, TILE_GRASS, TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK },
			{ TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK },
			{ TILE_GRASS, TILE_GRASS, TILE_WATER, TILE_WATER, TILE_WHITE_BRICK, TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK },
			{ TILE_GRASS, TILE_GRASS, TILE_WATER, TILE_WATER, TILE_WHITE_BRICK, TILE_GRASS, TILE_GRASS, TILE_WHITE_BRICK, TILE_WHITE_BRICK, TILE_WHITE_BRICK }
		};
	
	 = 
		{
			{ TEXTURE_NONE, TEXTURE_NONE, OBJECT_TREE_1, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE },
			{ OBJECT_WOODEN_FENCE_LEFT, OBJECT_WOODEN_FENCE_LEFT, OBJECT_WOODEN_FENCE_LEFT, OBJECT_WOODEN_FENCE_LEFT, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE },
			{ TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, OBJECT_TREE_2, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE },
			{ TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, OBJECT_WOODEN_FENCE_VERT },
			{ TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, OBJECT_WOODEN_FENCE_VERT },
			{ TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, OBJECT_WOODEN_FENCE_VERT },
			{ TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, OBJECT_WOODEN_FENCE_VERT },
			{ TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, OBJECT_ROCK_1, OBJECT_WOODEN_FENCE_LEFT, OBJECT_WOODEN_FENCE_LEFT, OBJECT_WOODEN_FENCE_LEFT, OBJECT_WOODEN_FENCE_LEFT, OBJECT_WOODEN_FENCE_POST },
			{ TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, OBJECT_ROCK_2, TEXTURE_NONE, TEXTURE_NONE },
			{ TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE, TEXTURE_NONE }
		};*/
	// figure out which tiles are walkable
	for (int i = 0; i < mapRows; i++) 
	{
		for (int j = 0; j < mapCols; j++) 
		{
			if (mapTiles[i][j] != TILE_WATER && objectTiles[i][j] == TEXTURE_NONE)
			{
				walkableTiles[i][j] = true;
			} 
			else 
			{
				walkableTiles[i][j] = false;
			}
		}
	}
	for (int i = 0; i < mapRows; i++)
	{
		for (int j = 0; j < mapCols; j++)
		{
			printf("%d", walkableTiles[i][j]);
		}
		printf("\n");
	}
}